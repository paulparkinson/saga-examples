package oracle.examples.cloudbank.services;

import oracle.examples.cloudbank.model.Accounts;
import oracle.examples.cloudbank.repository.AccountsRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.DeleteMapping;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/v1")
public class AccountsAdminService {

    final AccountsRepository accountsRepository;
    private final Logger log = LoggerFactory.getLogger(this.getClass());

    public AccountsAdminService(AccountsRepository accountsRepository) {
        this.accountsRepository = accountsRepository;
    }

    // Get Account with specific Account ID
    @GetMapping("/account/{accountId}")
    public ResponseEntity<Accounts> getAccountById(@PathVariable("accountId") long accountId) {
        log.info("ACCOUNT: getAccountById");
        Optional<Accounts> accountData = accountsRepository.findById(accountId);
        try {
            return accountData.map(account -> new ResponseEntity<>(account, HttpStatus.OK))
                    .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/account/getAccounts/{customerId}")
    public ResponseEntity<List<Accounts>> getAccountsByCustomerId(@PathVariable("customerId") String customerId) {
        log.info("ACCOUNT: getAccountsByCustomerId");
        try {
            List<Accounts> accountData = new ArrayList<Accounts>();
            accountData.addAll(accountsRepository.findByAccountCustomerId(customerId));
            if (accountData.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            return new ResponseEntity<>(accountData, HttpStatus.OK);
        } catch (Exception e) {
                return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
            }
    }

    // Create Account. ACCOUNT_ID autogenerated and so is DATE_BECAME_CUSTOMER in DDL
    @PostMapping("/account")
    public ResponseEntity<Accounts> createAccount(@RequestBody Accounts account) {
        log.info("ACCOUNT: createAccount");
        try {
            Accounts _account = accountsRepository.save(new Accounts(
                    account.getAccountName(),
                    account.getAccountType(),
                    account.getAccountOtherDetails(),
                    account.getAccountCustomerId()));
            return new ResponseEntity<>(_account, HttpStatus.CREATED);

        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/account/{accountId}")
    public ResponseEntity<HttpStatus> deleteAccount(@PathVariable("accountId") long accountId) {
        log.info("ACCOUNT: deleteAccount");
        try {
            accountsRepository.deleteById(accountId);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping("/account/withdraw/{customerId}/{accountId}/{amount}")
    public ResponseEntity<HttpStatus> withdrawAccount(@PathVariable ("customerId") String customerId,
                                                      @PathVariable ("accountId") long accountId,
                                                      @PathVariable ("amount") long amount) {
        log.info("ACCOUNT: withdrawAccount");
        try {
            // Check Account balance
            // Create withdraw transaction
            // Update Account Balance
            // Notify
            return new ResponseEntity<>(HttpStatus.I_AM_A_TEAPOT);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping("/account/deposit/{customerId}/{accountId}/{amount}")
    public ResponseEntity<HttpStatus> depositAccount(@PathVariable ("customerId") String customerId,
                                                     @PathVariable ("accountId") long accountId,
                                                     @PathVariable ("amount") long amount) {
        log.info("ACCOUNT: depositAccount");
        try {
            // Create deposit transaction
            // Update account balance
            // Notify
            return new ResponseEntity<>(HttpStatus.I_AM_A_TEAPOT);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


}

